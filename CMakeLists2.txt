cmake_minimum_required(VERSION 3.5)

project(GNSSTuner LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# QtCreator supports the following variables for Android, which are identical to qmake Android variables.
# Check http://doc.qt.io/qt-5/deployment-android.html for more information.
# They need to be set before the find_package(Qt5 ...) call.

#if(ANDROID)
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
#    if (ANDROID_ABI STREQUAL "armeabi-v7a")
#        set(ANDROID_EXTRA_LIBS
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libcrypto.so
#            ${CMAKE_CURRENT_SOURCE_DIR}/path/to/libssl.so)
#    endif()
#endif()

find_package(Qt5 COMPONENTS Widgets LinguistTools REQUIRED)

set(TS_FILES GNSSTuner_zh_CN.ts)

if(ANDROID)
  add_library(GNSSTuner SHARED
      signaltonoiseratio.cpp
      gnssparser.cpp
      locateinformation.cpp
      main.cpp
      mainwindow.cpp
      signaltonoiseratio.h
      gnssparser.h
      locateinformation.h
      mainwindow.h
      signaltonoiseratio.ui
      resources.qrc
      locateinformation.ui
      mainwindow.ui
    ${TS_FILES}
  )
else()
  add_executable(GNSSTuner
      signaltonoiseratio.cpp
      gnssparser.cpp
      locateinformation.cpp
      main.cpp
      mainwindow.cpp
      signaltonoiseratio.h
      gnssparser.h
      locateinformation.h
      mainwindow.h
      signaltonoiseratio.ui
      resources.qrc
      locateinformation.ui
      mainwindow.ui
    ${TS_FILES}
  )
endif()


# 查找Qt库
find_package(Qt5 COMPONENTS Widgets WebEngineWidgets SerialPort REQUIRED)

# 添加头文件目录
include_directories(${Qt5Widgets_INCLUDE_DIRS}
                    ${Qt5WebEngineWidgets_INCLUDE_DIRS}
                    ${Qt5SerialPort_INCLUDE_DIRS})

target_link_libraries(GNSSTuner PRIVATE Qt5::Widgets Qt5::WebEngineWidgets Qt5::SerialPort)

qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
